generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  userId        String         @unique
  password      String
  loginStatus   String         @default("inactive")
  registerDate  DateTime       @default(now())
  role          String         @default("user")
  administrator Administrator?
  customer      Customer?

  @@map("users")
}

model Customer {
  id             String         @id @default(uuid())
  customerName   String
  address        String
  email          String         @unique
  creditCardInfo String?
  shippingInfo   String?
  accountBalance Float          @default(0)
  userId         String         @unique
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders         Order[]
  shoppingCarts  ShoppingCart[]

  @@map("customers")
}

model Administrator {
  id        String @id @default(uuid())
  adminName String
  email     String @unique
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("administrators")
}

model ShoppingCart {
  id         String             @id @default(uuid())
  customerId String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  cartItems  ShoppingCartItem[]
  customer   Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("shopping_carts")
}

model ShoppingCartItem {
  id        String       @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  dateAdded DateTime     @default(now())
  cart      ShoppingCart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("shopping_cart_items")
}

model Order {
  id           String        @id @default(uuid())
  orderId      String        @unique
  dateCreated  DateTime      @default(now())
  dateShipped  DateTime?
  customerName String
  customerId   String
  status       String        @default("pending")
  shippingId   String?
  orderDetails OrderDetail[]
  customer     Customer      @relation(fields: [customerId], references: [id])
  shippingInfo ShippingInfo? @relation(fields: [shippingId], references: [id])
  products     Product[]     @relation("OrderToProduct")

  @@map("orders")
}

model OrderDetail {
  id          String  @id @default(uuid())
  orderId     String
  productId   String
  productName String
  quantity    Int
  unitCost    Float
  subtotal    Float
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])

  @@map("order_details")
}

model ShippingInfo {
  id               String  @id @default(uuid())
  shippingId       String  @unique
  shippingType     String
  shippingCost     Float
  shippingRegionId Int
  orders           Order[]

  @@map("shipping_info")
}

model Product {
  id            String             @id @default(uuid())
  productId     String             @unique
  productName   String
  productPrice  Float
  productStatus String             @default("active")
  image         String?
  categoryId    String
  orderDetails  OrderDetail[]
  category      ProductCategory    @relation(fields: [categoryId], references: [id])
  cartItems     ShoppingCartItem[]
  orders        Order[]            @relation("OrderToProduct")

  @@map("products")
}

model ProductCategory {
  id           String    @id @default(uuid())
  categoryId   String    @unique
  categoryName String
  image        String?
  websiteId    String
  products     Product[]

  @@map("product_categories")
}
